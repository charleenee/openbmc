From 6418f3f1e3e5d02739ffe3ee01b29714cb48afcd Mon Sep 17 00:00:00 2001
From: Steven Smith <sos22@archy.org.uk>
Date: Fri, 17 Nov 2017 08:44:33 -0800
Subject: [PATCH] agetty: Fix a use of uninitialised memory in an agetty error
 path.

get_logname() assumes that when it calls read() it initializes c and
errno, which isn't always true if we hit a whitelisted error or end of
file. This occasionally shows up as agetty going into an infinite
loop. Fix it by just delaying ten seconds and exiting when things go
wrong, similarly to the behavior after a non-whitelisted error.

[kzak@redhat.com: - interpret readres == 0 as c = 0
                  - ignore speed configurations for VCONSOLE]

Signed-off-by: Steven Smith <sos22@srcf.ucam.org>
Signed-off-by: Karel Zak <kzak@redhat.com>
Signed-off-by: Tao Ren <taoren@fb.com>
---
 term-utils/agetty.c | 25 ++++++++++++++++++-------
 1 file changed, 18 insertions(+), 7 deletions(-)

diff --git a/term-utils/agetty.c b/term-utils/agetty.c
index 93a3843..fb745dc 100644
--- a/term-utils/agetty.c
+++ b/term-utils/agetty.c
@@ -309,6 +309,7 @@ static void termio_final(struct options *op,
 static int caps_lock(char *s);
 static speed_t bcode(char *s);
 static void usage(FILE * out) __attribute__((__noreturn__));
+static void exit_slowly(int code) __attribute__((__noreturn__));
 static void log_err(const char *, ...) __attribute__((__noreturn__))
 			       __attribute__((__format__(printf, 1, 2)));
 static void log_warn (const char *, ...)
@@ -1875,6 +1876,7 @@ static char *get_logname(struct options *op, struct termios *tp, struct chardata
 
 			char key;
 			int force_echo = 0;
+			ssize_t readres = 1;
 
 			/* use already read data from buffer */
 			if (presz && precur < presz) {
@@ -1882,8 +1884,7 @@ static char *get_logname(struct options *op, struct termios *tp, struct chardata
 				force_echo = 1;
 
 			/* read from terminal */
-			} else if (read(STDIN_FILENO, &c, 1) < 1) {
-
+			} else if ((readres = read(STDIN_FILENO, &c, 1)) < 0) {
 				/* The terminal could be open with O_NONBLOCK when
 				 * -L (force CLOCAL) is specified...  */
 				if (errno == EINTR || errno == EAGAIN) {
@@ -1896,12 +1897,15 @@ static char *get_logname(struct options *op, struct termios *tp, struct chardata
 				case ESRCH:
 				case EINVAL:
 				case ENOENT:
-					break;
+					exit_slowly(EXIT_SUCCESS);
 				default:
 					log_err(_("%s: read: %m"), op->tty);
 				}
 			}
 
+			if (readres == 0)
+				c = 0;
+
 			/* Do parity bit handling. */
 			if (eightbit)
 				ascval = c;
@@ -1926,8 +1930,10 @@ static char *get_logname(struct options *op, struct termios *tp, struct chardata
 			switch (key) {
 			case 0:
 				*bp = 0;
-				if (op->numspeed > 1)
+				if (op->numspeed > 1 && !(op->flags & F_VCONSOLE))
 					return NULL;
+				if (readres == 0)
+					exit_slowly(EXIT_SUCCESS);
 				break;
 			case CR:
 			case NL:
@@ -2202,6 +2208,13 @@ static void dolog(int priority, const char *fmt, va_list ap)
 #endif				/* USE_SYSLOG */
 }
 
+static void exit_slowly(int code)
+{
+	/* Be kind to init(8). */
+	sleep(10);
+	exit(code);
+}
+
 static void log_err(const char *fmt, ...)
 {
 	va_list ap;
@@ -2210,9 +2223,7 @@ static void log_err(const char *fmt, ...)
 	dolog(LOG_ERR, fmt, ap);
 	va_end(ap);
 
-	/* Be kind to init(8). */
-	sleep(10);
-	exit(EXIT_FAILURE);
+	exit_slowly(EXIT_FAILURE);
 }
 
 static void log_warn(const char *fmt, ...)
-- 
2.30.2

