From c83a565f52b6150b0bd267f48cb87fa166fed747 Mon Sep 17 00:00:00 2001
From: Howard Chiu <howard.chiu@quantatw.com>
Date: Thu, 2 Dec 2021 15:14:44 +0800
Subject: [PATCH 1/3] Fansensor: Support ast26xx pwm/tach

Add new fantype for ast26xx tach driver.
Use pwm-fan driver to setup ast26xx pwm driver for easier usage.
User must define pwm-fan node in dts as below

pwm-fanX {
	compatible = "pwm-fan";
	.......
};
refer Documentation/devicetree/bindings/hwmon/pwm-fan.txt for details

and Connector in EM configuration
"Connector": {
    "Pwm": X,
    ......
}

where X is integer

Tested: On Facebook Bletchley (ast26xx) Platform with 1 fan

root@bletchley:/sys/class/leds# busctl set-property xyz.openbmc_project.FanSensor /xyz/openbmc_project/sensors/fan_pwm/Pwm_1 xyz.openbmc_project.Sensor.Value Value d 20
root@bletchley:/sys/class/leds# busctl introspect xyz.openbmc_project.FanSensor /xyz/openbmc_project/sensors/fan_tach/FAN0_TACH_IL xyz.openbmc_project.Sensor.Value
NAME                             TYPE      SIGNATURE RESULT/VALUE                             FLAGS
.MaxValue                        property  d         25000                                    emits-change
.MinValue                        property  d         0                                        emits-change
.Unit                            property  s         "xyz.openbmc_project.Sensor.Value.Uni... emits-change
.Value                           property  d         3189                                     emits-change writable
root@bletchley:/sys/class/leds# busctl introspect xyz.openbmc_project.FanSensor /xyz/openbmc_project/sensors/fan_tach/FAN0_TACH_OL xyz.openbmc_project.Sensor.Value
NAME                             TYPE      SIGNATURE RESULT/VALUE                             FLAGS
.MaxValue                        property  d         25000                                    emits-change
.MinValue                        property  d         0                                        emits-change
.Unit                            property  s         "xyz.openbmc_project.Sensor.Value.Uni... emits-change
.Value                           property  d         3006                                     emits-change writable

Signed-off-by: Howard Chiu <howard.chiu@quantatw.com>
Change-Id: Ifda89310590c9d914fa0a302df412fead807daa8
Signed-off-by: Potin Lai <potin.lai@quantatw.com>
---
 src/FanMain.cpp | 49 +++++++++++++++++++++++++++++++++++++++++++------
 1 file changed, 43 insertions(+), 6 deletions(-)

diff --git a/src/FanMain.cpp b/src/FanMain.cpp
index 112848b..b1ed071 100644
--- a/src/FanMain.cpp
+++ b/src/FanMain.cpp
@@ -70,7 +70,8 @@ FanTypes getFanType(const fs::path& parentPath)
     fs::path linkPath = parentPath / "device";
     std::string canonical = fs::read_symlink(linkPath);
     if (boost::ends_with(canonical, "1e786000.pwm-tacho-controller") ||
-        boost::ends_with(canonical, "1e610000.pwm-tacho-controller"))
+        boost::ends_with(canonical, "1e610000.pwm-tacho-controller") ||
+        boost::ends_with(canonical, "1e610000.pwm_tach:tach"))
     {
         return FanTypes::aspeed;
     }
@@ -97,6 +98,29 @@ void enablePwm(const fs::path& filePath)
         enableFile << 1;
     }
 }
+fs::path getPwmfanPath(unsigned int configPwmfanIndex)
+{
+    /* Search PWM since pwm-fan had separated
+     * PWM from tach directory and 1 channel only*/
+    std::vector<fs::path> pwmfanPaths;
+    std::string pwnfanDevName("pwm-fan");
+    pwnfanDevName += std::to_string(configPwmfanIndex);
+
+    if (!findFiles(fs::path("/sys/class/hwmon"), R"(pwm\d+)", pwmfanPaths))
+    {
+        return {};
+    }
+    for (const auto& pwmfanPath : pwmfanPaths)
+    {
+        fs::path link = fs::read_symlink(pwmfanPath.parent_path() / "device");
+
+        if (link.filename().string() == pwnfanDevName)
+        {
+            return pwmfanPath;
+        }
+    }
+    return {};
+}
 void createRedundancySensor(
     const boost::container::flat_map<std::string, std::unique_ptr<TachSensor>>&
         sensors,
@@ -386,14 +410,27 @@ void createSensors(
                     auto findPwm = connector->second.find("Pwm");
                     if (findPwm != connector->second.end())
                     {
-                        fs::path pwmEnableFile =
-                            "pwm" + std::to_string(index + 1) + "_enable";
-                        fs::path enablePath =
-                            path.parent_path() / pwmEnableFile;
-                        enablePwm(enablePath);
                         size_t pwm = std::visit(VariantToUnsignedIntVisitor(),
                                                 findPwm->second);
                         pwmPath = directory / ("pwm" + std::to_string(pwm + 1));
+
+                        if (!fs::exists(pwmPath))
+                        {
+                            pwmPath = getPwmfanPath(pwm);
+                            if (pwmPath.empty())
+                            {
+                                std::cerr << "Connector for " << sensorName
+                                          << " no pwm channel found!\n";
+                            }
+                        }
+                        else
+                        {
+                            fs::path pwmEnableFile =
+                                "pwm" + std::to_string(index + 1) + "_enable";
+                            fs::path enablePath = directory / pwmEnableFile;
+                            enablePwm(enablePath);
+                        }
+
                         /* use pwm name override if found in configuration else
                          * use default */
                         auto findOverride = connector->second.find("PwmName");
-- 
2.17.1

